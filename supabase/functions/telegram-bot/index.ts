
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface TelegramUpdate {
  message?: {
    chat: {
      id: number;
      type: string;
    };
    from?: {
      id: number;
      first_name?: string;
      last_name?: string;
      username?: string;
    };
    text?: string;
  };
}

interface TelegramMessage {
  chat_id: number;
  text: string;
  parse_mode?: string;
  reply_markup?: any;
}

const greetingsByRole = {
  admin: '–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n‚Äì –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö\n‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n‚Äì –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –∫–æ–º–∞–Ω–¥–µ\n\n–í—Å–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º. üõ†',
  operator: '–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏ —Ç–µ–≥–∞—Ö,\n—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤–∞—à–∏–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏.\n\n–•–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–ª–∏—á–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤! ‚òéÔ∏è',
  observer: '–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n‚Äì –û–±–∑–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç—Ä–µ–≤–æ–∂–Ω—ã–º –∑–≤–æ–Ω–∫–∞–º\n‚Äì –°–≤–æ–¥–∫–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∫–æ–º–∞–Ω–¥—ã\n\n–í—ã –≤ –∫—É—Ä—Å–µ, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —à—É–º–∞. üëÄ',
  manager: '–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n‚Äì –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–∞—Ö –≤ –≤–∞—à–µ–π –∑–æ–Ω–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\n‚Äì –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–∞–Ω–¥—ã\n\n–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ ‚Äî –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö! üí¨'
};

const getRoleDisplayName = (role: string) => {
  const roleNames: { [key: string]: string } = {
    admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    operator: '–û–ø–µ—Ä–∞—Ç–æ—Ä',
    observer: '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å',
    manager: '–ú–µ–Ω–µ–¥–∂–µ—Ä'
  };
  return roleNames[role] || role;
};

serve(async (req) => {
  console.log('=== Telegram Bot Function Called ===');
  console.log('Method:', req.method);
  console.log('Headers:', Object.fromEntries(req.headers.entries()));

  if (req.method === 'OPTIONS') {
    console.log('Handling CORS preflight request');
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN');
    if (!botToken) {
      console.error('TELEGRAM_BOT_TOKEN not found in environment variables');
      throw new Error('Telegram bot token not configured');
    }
    console.log('Bot token found, length:', botToken.length);

    // –ü–æ–ª—É—á–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const requestBody = await req.text();
    console.log('Raw request body:', requestBody);

    let update: TelegramUpdate;
    try {
      update = JSON.parse(requestBody);
      console.log('Parsed update:', JSON.stringify(update, null, 2));
    } catch (parseError) {
      console.error('Failed to parse request body as JSON:', parseError);
      return new Response(JSON.stringify({ ok: true }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const message = update.message;

    if (!message) {
      console.log('No message in update, ignoring');
      return new Response(JSON.stringify({ ok: true }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    if (!message.text) {
      console.log('No text in message, ignoring');
      return new Response(JSON.stringify({ ok: true }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    if (!message.from) {
      console.log('No from user in message, ignoring');
      return new Response(JSON.stringify({ ok: true }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const chatId = message.chat.id;
    const userId = message.from.id;
    const text = message.text.trim();
    const firstName = message.from.first_name || '';
    const username = message.from.username || '';

    console.log('Processing message from user:', userId, 'chat:', chatId, 'text:', text);
    console.log('User details:', { firstName, username });

    let responseMessage = '';

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text.startsWith('/start')) {
      console.log('Processing /start command');
      const parts = text.split(' ');
      console.log('Command parts:', parts);
      
      if (parts.length > 1) {
        // –ï—Å—Ç—å session_code
        const sessionCode = parts[1];
        console.log('Processing session code:', sessionCode);
        
        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        const { data: session, error: sessionError } = await supabaseClient
          .from('telegram_sessions')
          .select('*')
          .eq('session_code', sessionCode)
          .eq('used', false)
          .gte('expires_at', new Date().toISOString())
          .single();

        console.log('Session query result:', { session, sessionError });

        if (sessionError || !session) {
          console.log('Invalid session:', sessionError?.message || 'Session not found');
          responseMessage = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ CallControl:\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç";
        } else {
          console.log('Valid session found for user:', session.user_id);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–≤—è–∑–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
          const { data: existingChatLink, error: existingChatError } = await supabaseClient
            .from('telegram_links')
            .select('*, users!inner(name, role)')
            .eq('chat_id', chatId)
            .eq('active', true)
            .maybeSingle();

          console.log('Existing chat link check:', { existingChatLink, existingChatError });

          if (existingChatLink && existingChatLink.user_id !== session.user_id) {
            // –≠—Ç–æ—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            console.log('Chat already linked to different user');
            const otherUserName = existingChatLink.users?.name || '–¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é';
            responseMessage = `‚ö†Ô∏è –≠—Ç–æ—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ ${otherUserName}.\n\n–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π Telegram-–∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–≤—è–∑–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data: existingUserLink, error: existingUserError } = await supabaseClient
              .from('telegram_links')
              .select('*')
              .eq('user_id', session.user_id)
              .eq('active', true)
              .maybeSingle();

            console.log('Existing user link check:', { existingUserLink, existingUserError });

            if (existingUserLink && existingUserLink.chat_id !== chatId) {
              // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π Telegram
              console.log('User already has different telegram linked');
              responseMessage = `‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥—Ä—É–≥–æ–π Telegram-–∞–∫–∫–∞—É–Ω—Ç.\n\n–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö CallControl, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.`;
            } else if (existingUserLink && existingUserLink.chat_id === chatId) {
              // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–≥–æ –∂–µ –∞–∫–∫–∞—É–Ω—Ç–∞
              console.log('Re-connecting same telegram account');
              const { error: updateError } = await supabaseClient
                .from('telegram_links')
                .update({
                  telegram_username: username,
                  first_name: firstName,
                  updated_at: new Date().toISOString()
                })
                .eq('id', existingUserLink.id);

              if (updateError) {
                console.error('Error updating existing link:', updateError);
                responseMessage = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.";
              } else {
                console.log('Successfully updated existing link');
                // –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
                await supabaseClient
                  .from('telegram_sessions')
                  .update({ used: true })
                  .eq('id', session.id);

                responseMessage = `‚úÖ Telegram —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É CallControl.\n\nüì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.`;
              }
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑–∫—É
              console.log('Creating new telegram link');
              const { error: insertError } = await supabaseClient
                .from('telegram_links')
                .insert({
                  user_id: session.user_id,
                  chat_id: chatId,
                  telegram_username: username,
                  first_name: firstName,
                  active: true
                });

              if (insertError) {
                console.error('Error creating new link:', insertError);
                responseMessage = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
              } else {
                console.log('Successfully created new telegram link');
                
                // –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
                const { error: sessionUpdateError } = await supabaseClient
                  .from('telegram_sessions')
                  .update({ used: true })
                  .eq('id', session.id);

                if (sessionUpdateError) {
                  console.error('Error marking session as used:', sessionUpdateError);
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                const userName = session.user_name || firstName;
                const userRole = session.user_role || 'user';
                const roleDisplayName = getRoleDisplayName(userRole);
                const roleGreeting = greetingsByRole[userRole as keyof typeof greetingsByRole] || greetingsByRole.operator;

                console.log('Creating personalized greeting for:', { userName, userRole, roleDisplayName });

                responseMessage = `–ü—Ä–∏–≤–µ—Ç, ${userName}! üëã\n‚úÖ Telegram –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É CallControl (—Ä–æ–ª—å: ${roleDisplayName}).\n\n${roleGreeting}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`;
              }
            }
          }
        }
      } else {
        // –û–±—ã—á–Ω—ã–π /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        console.log('Processing /start without parameters');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const { data: existingConnection, error: connectionError } = await supabaseClient
          .from('telegram_links')
          .select('*, users!inner(name, role)')
          .eq('chat_id', chatId)
          .eq('active', true)
          .maybeSingle();

        console.log('Existing connection check:', { existingConnection, connectionError });

        if (existingConnection) {
          const roleDisplayName = getRoleDisplayName(existingConnection.users.role);
          const userName = existingConnection.users.name || firstName;
          responseMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n‚úÖ –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ CallControl (—Ä–æ–ª—å: ${roleDisplayName}).\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.\n\nüí° –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.`;
        } else {
          responseMessage = `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CallControl!\n\nüìã –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n1. –û—Ç–∫—Ä–æ–π—Ç–µ CallControl –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n3. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç"\n4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ\n\nüí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;
        }
      }
    } else if (text === '/stop') {
      console.log('Processing /stop command');
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: linkData, error: stopError } = await supabaseClient
        .from('telegram_links')
        .update({ active: false })
        .eq('chat_id', chatId)
        .select('*, users!inner(name)')
        .maybeSingle();

      console.log('Stop command result:', { linkData, stopError });

      if (linkData) {
        const userName = linkData.users?.name || firstName;
        responseMessage = `üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, ${userName}!\n\n‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\nüîÑ –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ CallControl:\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç`;
      } else {
        responseMessage = "‚ùì –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüìã –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ CallControl:\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç";
      }
    } else if (text === '/help') {
      console.log('Processing /help command');
      responseMessage = `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç CallControl\n/stop - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\nüîî –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö\n‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n‚Ä¢ –í–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\nüí° –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ CallControl:\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç`;
    } else if (text === '/status') {
      console.log('Processing /status command');
      const { data: statusLink, error: statusError } = await supabaseClient
        .from('telegram_links')
        .select('active, created_at, telegram_username, users!inner(name, role)')
        .eq('chat_id', chatId)
        .maybeSingle();

      console.log('Status command result:', { statusLink, statusError });

      if (statusLink) {
        const status = statusLink.active ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω";
        const connectedDate = new Date(statusLink.created_at).toLocaleDateString('ru-RU');
        const roleDisplayName = getRoleDisplayName(statusLink.users.role);
        const userName = statusLink.users.name || firstName;
        responseMessage = `üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${status}\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\nüé≠ –†–æ–ª—å: ${roleDisplayName}\nüìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: ${connectedDate}\nüè∑Ô∏è Username: ${statusLink.telegram_username ? '@' + statusLink.telegram_username : '–Ω–µ —É–∫–∞–∑–∞–Ω'}`;
      } else {
        responseMessage = "‚ùì –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n\nüìã –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ CallControl –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç";
      }
    } else {
      console.log('Unknown command:', text);
      responseMessage = `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "${text}"\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`;
    }

    console.log('Sending response message:', responseMessage);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    console.log('Calling Telegram API:', telegramApiUrl);

    const telegramResponse = await fetch(telegramApiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: responseMessage,
        parse_mode: 'HTML'
      } as TelegramMessage),
    });

    const telegramResponseText = await telegramResponse.text();
    console.log('Telegram API response status:', telegramResponse.status);
    console.log('Telegram API response body:', telegramResponseText);

    if (!telegramResponse.ok) {
      console.error('Telegram API error:', telegramResponseText);
    } else {
      console.log('Message sent successfully to Telegram');
    }

    return new Response(JSON.stringify({ ok: true }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in telegram-bot function:', error);
    console.error('Error stack:', error.stack);
    
    return new Response(
      JSON.stringify({ ok: false, error: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
