
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface TelegramUpdate {
  message?: {
    chat: {
      id: number;
      type: string;
    };
    from?: {
      id: number;
      first_name?: string;
      last_name?: string;
      username?: string;
    };
    text?: string;
  };
}

interface TelegramMessage {
  chat_id: number;
  text: string;
  parse_mode?: string;
  reply_markup?: any;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN');
    if (!botToken) {
      throw new Error('Telegram bot token not configured');
    }

    const update: TelegramUpdate = await req.json();
    const message = update.message;

    if (!message || !message.text || !message.from) {
      return new Response(JSON.stringify({ ok: true }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const chatId = message.chat.id;
    const userId = message.from.id;
    const text = message.text.trim();
    const firstName = message.from.first_name || '';
    const username = message.from.username || '';

    console.log('Processing message:', text, 'from chat:', chatId);

    let responseMessage = '';

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text.startsWith('/start')) {
      const parts = text.split(' ');
      
      if (parts.length > 1) {
        // –ï—Å—Ç—å session_code
        const sessionCode = parts[1];
        console.log('Processing session code:', sessionCode);
        
        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        const { data: session, error: sessionError } = await supabaseClient
          .from('telegram_sessions')
          .select('*')
          .eq('session_code', sessionCode)
          .eq('used', false)
          .gte('expires_at', new Date().toISOString())
          .single();

        if (sessionError || !session) {
          console.log('Invalid session:', sessionError);
          responseMessage = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ CallControl.";
        } else {
          console.log('Valid session found for user:', session.user_id);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–≤—è–∑–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { data: existingLink } = await supabaseClient
            .from('telegram_links')
            .select('*')
            .eq('user_id', session.user_id)
            .eq('active', true)
            .maybeSingle();

          if (existingLink) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑–∫—É
            const { error: updateError } = await supabaseClient
              .from('telegram_links')
              .update({
                chat_id: chatId,
                telegram_username: username,
                first_name: firstName,
                updated_at: new Date().toISOString()
              })
              .eq('id', existingLink.id);

            if (updateError) {
              console.error('Error updating existing link:', updateError);
              responseMessage = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.";
            }
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑–∫—É
            const { error: insertError } = await supabaseClient
              .from('telegram_links')
              .insert({
                user_id: session.user_id,
                chat_id: chatId,
                telegram_username: username,
                first_name: firstName,
                active: true
              });

            if (insertError) {
              console.error('Error creating new link:', insertError);
              responseMessage = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.";
            }
          }

          if (!responseMessage) {
            // –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
            await supabaseClient
              .from('telegram_sessions')
              .update({ used: true })
              .eq('id', session.id);

            responseMessage = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç CallControl —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram.

üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –í–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`;
          }
        }
      } else {
        // –û–±—ã—á–Ω—ã–π /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        responseMessage = `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CallControl!

–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:
1. –û—Ç–∫—Ä–æ–π—Ç–µ CallControl –≤ –±—Ä–∞—É–∑–µ—Ä–µ
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
3. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç"
4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;
      }
    } else if (text === '/stop') {
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: linkData } = await supabaseClient
        .from('telegram_links')
        .update({ active: false })
        .eq('chat_id', chatId)
        .select()
        .maybeSingle();

      if (linkData) {
        responseMessage = "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ CallControl –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.";
      } else {
        responseMessage = "‚ùì –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ CallControl –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.";
      }
    } else if (text === '/help') {
      responseMessage = `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç CallControl
/stop - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è  
/status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîî –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –í–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

üí° –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ CallControl:
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç`;
    } else if (text === '/status') {
      const { data: statusLink } = await supabaseClient
        .from('telegram_links')
        .select('active, created_at, telegram_username')
        .eq('chat_id', chatId)
        .maybeSingle();

      if (statusLink) {
        const status = statusLink.active ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω";
        const connectedDate = new Date(statusLink.created_at).toLocaleDateString('ru-RU');
        responseMessage = `üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${status}
üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: ${connectedDate}
üë§ Username: @${statusLink.telegram_username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`;
      } else {
        responseMessage = "‚ùì –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ CallControl –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.";
      }
    } else {
      responseMessage = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: responseMessage,
          parse_mode: 'HTML'
        } as TelegramMessage),
      }
    );

    if (!telegramResponse.ok) {
      console.error('Telegram API error:', await telegramResponse.text());
    }

    return new Response(JSON.stringify({ ok: true }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in telegram-bot function:', error);
    return new Response(
      JSON.stringify({ ok: false, error: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
