
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { TelegramUser } from './types.ts';
import { greetingsByRole, getRoleDisplayName, getFriendlyName } from './greetings.ts';

export const handleStartCommand = async (
  supabaseClient: any,
  chatId: number,
  text: string,
  user: TelegramUser
) => {
  console.log('Processing /start command');
  const parts = text.split(' ');
  console.log('Command parts:', parts);
  
  if (parts.length > 1) {
    // –ï—Å—Ç—å session_code - –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É
    const sessionCode = parts[1];
    console.log('Processing session code:', sessionCode);
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é confirm –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞
    try {
      const { data: confirmResult, error: confirmError } = await supabaseClient.functions.invoke(
        'telegram-confirm',
        {
          body: {
            code: sessionCode,
            chat_id: chatId,
            first_name: user.first_name,
            username: user.username
          }
        }
      );

      console.log('Confirm function result:', { confirmResult, confirmError });

      if (confirmError || !confirmResult || confirmResult.status !== 'ok') {
        const errorMsg = confirmResult?.error || confirmError?.message || 'Unknown error';
        console.log('Confirmation failed:', errorMsg);
        
        if (errorMsg.includes('Code not found') || errorMsg.includes('expired')) {
          return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ CallControl:\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç";
        } else if (errorMsg.includes('already linked')) {
          return "‚ö†Ô∏è –≠—Ç–æ—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π Telegram-–∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
        } else {
          return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
        }
      } else {
        // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const userRole = confirmResult.user_role || 'operator';
        const roleDisplayName = getRoleDisplayName(userRole);
        const roleGreeting = greetingsByRole[userRole as keyof typeof greetingsByRole] || greetingsByRole.operator;
        const friendlyName = getFriendlyName(user.first_name, user.username);

        console.log('Creating personalized greeting for:', { friendlyName, userRole, roleDisplayName });

        return `–ü—Ä–∏–≤–µ—Ç, ${friendlyName}! üëã\n‚úÖ Telegram –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ CallControl –∫–∞–∫ ${roleDisplayName}.\n\n${roleGreeting}\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`;
      }
    } catch (error) {
      console.error('Error calling confirm function:', error);
      return "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }
  } else {
    // –û–±—ã—á–Ω—ã–π /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    console.log('Processing /start without parameters - checking existing connection');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    const { data: existingConnection, error: connectionError } = await supabaseClient
      .from('telegram_links')
      .select('*, users!inner(name, role)')
      .eq('chat_id', chatId)
      .eq('active', true)
      .maybeSingle();

    console.log('Existing connection check for chat:', { existingConnection, connectionError });

    if (existingConnection) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
      const roleDisplayName = getRoleDisplayName(existingConnection.users.role);
      const friendlyName = getFriendlyName(user.first_name, user.username);
      const roleGreeting = greetingsByRole[existingConnection.users.role as keyof typeof greetingsByRole] || greetingsByRole.operator;
      
      return `üëã –ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, ${friendlyName}!\n\n‚úÖ –í–∞—à Telegram —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ CallControl (—Ä–æ–ª—å: ${roleDisplayName}).\n\n${roleGreeting}\n\nüí° –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.`;
    } else {
      // –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const friendlyName = getFriendlyName(user.first_name, user.username);
      return `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CallControl, ${friendlyName}!\n\nüìã –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n1. –û—Ç–∫—Ä–æ–π—Ç–µ CallControl –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n3. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç"\n4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ\n\nüí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;
    }
  }
};

export const handleStopCommand = async (
  supabaseClient: any,
  chatId: number,
  user: TelegramUser
) => {
  console.log('Processing /stop command');
  // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: linkData, error: stopError } = await supabaseClient
    .from('telegram_links')
    .update({ active: false })
    .eq('chat_id', chatId)
    .select('*, users!inner(name)')
    .maybeSingle();

  console.log('Stop command result:', { linkData, stopError });

  if (linkData) {
    const friendlyName = getFriendlyName(user.first_name, user.username);
    return `üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, ${friendlyName}!\n\n‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\nüîÑ –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ CallControl:\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç`;
  } else {
    return "‚ùì –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüìã –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ CallControl:\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç";
  }
};

export const handleHelpCommand = (user: TelegramUser) => {
  console.log('Processing /help command');
  const friendlyName = getFriendlyName(user.first_name, user.username);
  return `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, ${friendlyName}:\n\n/start - –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç CallControl\n/stop - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\nüîî –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö\n‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n‚Ä¢ –í–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\nüí° –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ CallControl:\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç`;
};

export const handleStatusCommand = async (
  supabaseClient: any,
  chatId: number,
  user: TelegramUser
) => {
  console.log('Processing /status command');
  const { data: statusLink, error: statusError } = await supabaseClient
    .from('telegram_links')
    .select('active, created_at, telegram_username, users!inner(name, role)')
    .eq('chat_id', chatId)
    .maybeSingle();

  console.log('Status command result:', { statusLink, statusError });

  if (statusLink) {
    const status = statusLink.active ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω";
    const connectedDate = new Date(statusLink.created_at).toLocaleDateString('ru-RU');
    const roleDisplayName = getRoleDisplayName(statusLink.users.role);
    const friendlyName = getFriendlyName(user.first_name, user.username);
    return `üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${status}\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${friendlyName}\nüé≠ –†–æ–ª—å: ${roleDisplayName}\nüìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: ${connectedDate}\nüè∑Ô∏è Username: ${statusLink.telegram_username ? '@' + statusLink.telegram_username : '–Ω–µ —É–∫–∞–∑–∞–Ω'}`;
  } else {
    return "‚ùì –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n\nüìã –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ CallControl –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç";
  }
};

export const handleUnknownCommand = (text: string) => {
  console.log('Unknown command:', text);
  return `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "${text}"\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`;
};
