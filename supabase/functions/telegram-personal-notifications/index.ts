
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface NotificationRequest {
  user_id?: string;
  user_ids?: string[];
  message: string;
  type?: 'info' | 'success' | 'warning' | 'error';
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { user_id, user_ids, message, type = 'info' }: NotificationRequest = await req.json();

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // –¢—É—Ç ‚Äî –µ–¥–∏–Ω—ã–π —Ç–æ–∫–µ–Ω, –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN');
    if (!botToken) throw new Error('Telegram bot token not configured');

    // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-—Ä–µ—Ü–∏–ø–∏–µ–Ω—Ç–æ–≤
    const targetUserIds = user_id ? [user_id] : (user_ids || []);
    if (targetUserIds.length === 0) throw new Error('No user IDs provided');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–µ–π + –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (+ user_role)
    const { data: links, error: linkError } = await supabaseClient
      .from('telegram_links')
      .select(`
        chat_id, user_id, first_name, username, org_id, is_active,
        users:users (
          name, role, org_id,
          organizations (
            name
          )
        )
      `)
      .in('user_id', targetUserIds)
      .eq('is_active', true);

    if (linkError) throw linkError;

    if (!links || links.length === 0) {
      return new Response(
        JSON.stringify({
          success: true,
          message: 'No active Telegram links found',
          sent_count: 0
        }),
        {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    }

    // –≠–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É
    const typeEmojis: Record<string, string> = {
      info: '‚ÑπÔ∏è',
      success: '‚úÖ',
      warning: '‚ö†Ô∏è',
      error: '‚ùå'
    };

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Å—Ç–∞–≤–∫–∞–º–∏: –∏–º—è, —Ä–æ–ª—å, –æ—Ä–≥
    function formatMessageTelegram(link: any): string {
      const fullname = link.users?.name || link.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const username = link.username ? `@${link.username}` : '';
      // –†–æ–ª—å –∏–∑ users –∏–ª–∏ fallback
      const userRole = link.users?.role || 'user';
      // Friendly (—Ä—É—Å—Å–∫–æ–µ) –∏–º—è —Ä–æ–ª–∏
      const roleMap: Record<string, string> = {
        admin: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        manager: "–ú–µ–Ω–µ–¥–∂–µ—Ä",
        operator: "–û–ø–µ—Ä–∞—Ç–æ—Ä",
        viewer: "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å",
        superadmin: "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω"
      };
      const roleHuman = roleMap[userRole] || userRole;

      // –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
      const org = link.users?.organizations?.name || '‚Äî';

      // –ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      return `${typeEmojis[type] || ''} ${message}
üë§ ${fullname} ${username}
üé≠ –†–æ–ª—å: ${roleHuman}
üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${org}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const sendPromises = links.map(async (link: any) => {
      const formattedMessage = formatMessageTelegram(link);

      try {
        const response = await fetch(
          `https://api.telegram.org/bot${botToken}/sendMessage`,
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: link.chat_id,
              text: formattedMessage,
              parse_mode: 'HTML'
            }),
          }
        );
        const result = await response.json();

        if (!response.ok) {
          // –ï—Å–ª–∏ 403: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–≤—è–∑—å
          if (result?.error_code === 403) {
            await supabaseClient
              .from('telegram_links')
              .update({ is_active: false })
              .eq('chat_id', link.chat_id)
              .eq('user_id', link.user_id);
          }
          return { success: false, chat_id: link.chat_id, error: result };
        }
        return { success: true, chat_id: link.chat_id };
      } catch (error) {
        return { success: false, chat_id: link.chat_id, error: (error as any).message };
      }
    });

    const results = await Promise.all(sendPromises);
    const successCount = results.filter(r => r.success).length;
    const failedResults = results.filter(r => !r.success);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ ‚Äî –≤ audit_logs)
    const logData = {
      action: 'telegram_personal_notification',
      details: {
        target_users: targetUserIds,
        requested_message: message.substring(0, 100),
        type,
        sent_count: successCount,
        failed_count: failedResults.length,
        failures: failedResults
      },
      user_id: null
    };

    await supabaseClient
      .from('audit_logs')
      .insert(logData);

    return new Response(
      JSON.stringify({
        success: true,
        message: `Sent ${successCount} notifications`,
        sent_count: successCount,
        failed_count: failedResults.length,
        details: results
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error: any) {
    console.error('Error in telegram-personal-notifications function:', error);

    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
