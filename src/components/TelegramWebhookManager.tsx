
import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Settings, CheckCircle, XCircle, AlertTriangle, Loader2, RefreshCw } from 'lucide-react';
import { useTelegramWebhook } from '@/hooks/useTelegramWebhook';

export const TelegramWebhookManager = () => {
  const { 
    setWebhook, 
    getWebhookInfo, 
    deleteWebhook, 
    testBot, 
    isLoading, 
    webhookInfo, 
    botInfo 
  } = useTelegramWebhook();
  
  const [webhookStatus, setWebhookStatus] = useState<{
    isCorrect: boolean;
    expectedUrl: string;
  } | null>(null);

  useEffect(() => {
    checkWebhookStatus();
    checkBotStatus();
  }, []);

  const checkWebhookStatus = async () => {
    const result = await getWebhookInfo();
    if (result) {
      setWebhookStatus({
        isCorrect: result.isCorrect,
        expectedUrl: result.expectedUrl
      });
    }
  };

  const checkBotStatus = async () => {
    await testBot();
  };

  const handleSetupWebhook = async () => {
    const success = await setWebhook();
    if (success) {
      await checkWebhookStatus();
    }
  };

  const handleDeleteWebhook = async () => {
    const success = await deleteWebhook();
    if (success) {
      setWebhookStatus(null);
    }
  };

  const renderWebhookStatus = () => {
    if (!webhookInfo) {
      return (
        <Alert className="border-yellow-200 bg-yellow-50">
          <AlertTriangle className="h-4 w-4 text-yellow-600" />
          <AlertDescription className="text-yellow-800">
            ‚ö†Ô∏è Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.
          </AlertDescription>
        </Alert>
      );
    }

    if (webhookStatus?.isCorrect) {
      return (
        <Alert className="border-green-200 bg-green-50">
          <CheckCircle className="h-4 w-4 text-green-600" />
          <AlertDescription className="text-green-800">
            ‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
          </AlertDescription>
        </Alert>
      );
    } else {
      return (
        <Alert variant="destructive">
          <XCircle className="h-4 w-4" />
          <AlertDescription>
            ‚ùå Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û–∂–∏–¥–∞–µ—Ç—Å—è: {webhookStatus?.expectedUrl}
          </AlertDescription>
        </Alert>
      );
    }
  };

  const renderBotStatus = () => {
    if (!botInfo) {
      return (
        <Alert variant="destructive">
          <XCircle className="h-4 w-4" />
          <AlertDescription>
            ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.
          </AlertDescription>
        </Alert>
      );
    }

    return (
      <Alert className="border-green-200 bg-green-50">
        <CheckCircle className="h-4 w-4 text-green-600" />
        <AlertDescription className="text-green-800">
          ‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{botInfo.username} ({botInfo.first_name})
        </AlertDescription>
      </Alert>
    );
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Settings className="h-5 w-5" />
          –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Webhook
        </CardTitle>
        <CardDescription>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <div className="flex items-center justify-between mb-2">
            <h4 className="font-medium text-sm">–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</h4>
            <Button
              variant="ghost"
              size="sm"
              onClick={checkBotStatus}
              disabled={isLoading}
            >
              <RefreshCw className="h-4 w-4" />
            </Button>
          </div>
          {renderBotStatus()}
        </div>

        <div>
          <div className="flex items-center justify-between mb-2">
            <h4 className="font-medium text-sm">–°—Ç–∞—Ç—É—Å Webhook:</h4>
            <Button
              variant="ghost"
              size="sm"
              onClick={checkWebhookStatus}
              disabled={isLoading}
            >
              <RefreshCw className="h-4 w-4" />
            </Button>
          </div>
          {renderWebhookStatus()}
        </div>

        {webhookInfo && (
          <div className="bg-gray-50 p-3 rounded-lg space-y-2">
            <h5 className="font-medium text-sm">–î–µ—Ç–∞–ª–∏ Webhook:</h5>
            <div className="text-xs space-y-1">
              <div><strong>URL:</strong> {webhookInfo.url || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</div>
              <div><strong>–û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</strong> {webhookInfo.pending_update_count}</div>
              {webhookInfo.last_error_message && (
                <div className="text-red-600">
                  <strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:</strong> {webhookInfo.last_error_message}
                </div>
              )}
              <div><strong>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</strong> {webhookInfo.allowed_updates?.join(', ') || '–í—Å–µ'}</div>
            </div>
          </div>
        )}

        <div className="flex gap-2">
          <Button 
            onClick={handleSetupWebhook}
            disabled={isLoading}
            className="flex-1"
          >
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {webhookStatus?.isCorrect ? '–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook' : '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook'}
          </Button>
          
          {webhookInfo && (
            <Button 
              variant="outline"
              onClick={handleDeleteWebhook}
              disabled={isLoading}
            >
              –£–¥–∞–ª–∏—Ç—å Webhook
            </Button>
          )}
        </div>

        <div className="bg-blue-50 p-3 rounded-lg">
          <h5 className="font-medium text-blue-900 mb-2">üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h5>
          <ul className="text-sm text-blue-700 space-y-1">
            <li>‚Ä¢ Webhook –ø–æ–∑–≤–æ–ª—è–µ—Ç Telegram –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
            <li>‚Ä¢ –ë–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ webhook –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
            <li>‚Ä¢ –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É —Å–Ω–æ–≤–∞</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
};
