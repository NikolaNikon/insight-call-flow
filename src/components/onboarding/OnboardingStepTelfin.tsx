
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, XCircle, ExternalLink, TestTube } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useTelfinIntegration } from '@/hooks/useTelfinIntegration';

interface OnboardingStepTelfinProps {
  onComplete: () => void;
  isCompleted: boolean;
}

export const OnboardingStepTelfin = ({ onComplete, isCompleted }: OnboardingStepTelfinProps) => {
  const [config, setConfig] = useState({
    hostname: localStorage.getItem('telfin_hostname') || '',
    username: localStorage.getItem('telfin_username') || '',
    password: localStorage.getItem('telfin_password') || ''
  });
  const [testData, setTestData] = useState({
    clientId: '',
    recordUuid: ''
  });
  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle');
  
  const { toast } = useToast();
  const { isLoading, getAudioUrl } = useTelfinIntegration();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (config.hostname && config.username && config.password) {
      setConnectionStatus('success');
      onComplete();
    }
  }, []);

  const handleSaveConfig = () => {
    if (!config.hostname || !config.username || !config.password) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
        description: "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¢–µ–ª—Ñ–∏–Ω –Ω—É–∂–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ",
        variant: "destructive"
      });
      return;
    }

    localStorage.setItem('telfin_hostname', config.hostname);
    localStorage.setItem('telfin_username', config.username);
    localStorage.setItem('telfin_password', config.password);

    setConnectionStatus('success');
    onComplete();

    toast({
      title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
      description: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¢–µ–ª—Ñ–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
    });
  };

  const handleTestConnection = async () => {
    if (!testData.clientId || !testData.recordUuid) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
        description: "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ UUID –∑–∞–ø–∏—Å–∏",
        variant: "destructive"
      });
      return;
    }

    setConnectionStatus('testing');
    
    try {
      const audioUrl = await getAudioUrl(testData.clientId, testData.recordUuid);
      if (audioUrl) {
        setConnectionStatus('success');
        onComplete();
        toast({
          title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!",
          description: "–¢–µ–ª—Ñ–∏–Ω API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        });
      }
    } catch (error) {
      setConnectionStatus('error');
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
        variant: "destructive"
      });
    }
  };

  const getStatusBadge = () => {
    switch (connectionStatus) {
      case 'success':
        return <Badge className="bg-green-100 text-green-700"><CheckCircle className="h-4 w-4 mr-1" />–ü–æ–¥–∫–ª—é—á–µ–Ω–æ</Badge>;
      case 'error':
        return <Badge variant="destructive"><XCircle className="h-4 w-4 mr-1" />–û—à–∏–±–∫–∞</Badge>;
      case 'testing':
        return <Badge variant="outline">–¢–µ—Å—Ç–∏—Ä—É–µ–º...</Badge>;
      default:
        return <Badge variant="outline">–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ</Badge>;
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between mb-4">
        <div>
          <h3 className="text-lg font-medium">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¢–µ–ª—Ñ–∏–Ω API</h3>
          <p className="text-sm text-gray-600">
            –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–π IP-—Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
          </p>
        </div>
        {getStatusBadge()}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="text-base">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</CardTitle>
            <CardDescription>
              –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="hostname">Hostname</Label>
              <Input
                id="hostname"
                placeholder="example.telfin.ru"
                value={config.hostname}
                onChange={(e) => setConfig({ ...config, hostname: e.target.value })}
              />
            </div>
            
            <div>
              <Label htmlFor="username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Label>
              <Input
                id="username"
                placeholder="username"
                value={config.username}
                onChange={(e) => setConfig({ ...config, username: e.target.value })}
              />
            </div>
            
            <div>
              <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
              <Input
                id="password"
                type="password"
                placeholder="password"
                value={config.password}
                onChange={(e) => setConfig({ ...config, password: e.target.value })}
              />
            </div>

            <Button 
              onClick={handleSaveConfig} 
              className="w-full"
              disabled={!config.hostname || !config.username || !config.password}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-base">–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</CardTitle>
            <CardDescription>
              –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="test-client-id">ID –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∞)</Label>
              <Input
                id="test-client-id"
                placeholder="client_id"
                value={testData.clientId}
                onChange={(e) => setTestData({ ...testData, clientId: e.target.value })}
              />
            </div>
            
            <div>
              <Label htmlFor="test-record-uuid">UUID –∑–∞–ø–∏—Å–∏ (–¥–ª—è —Ç–µ—Å—Ç–∞)</Label>
              <Input
                id="test-record-uuid"
                placeholder="record_uuid"
                value={testData.recordUuid}
                onChange={(e) => setTestData({ ...testData, recordUuid: e.target.value })}
              />
            </div>

            <Button 
              onClick={handleTestConnection}
              variant="outline"
              className="w-full"
              disabled={isLoading || !testData.clientId || !testData.recordUuid}
            >
              <TestTube className="mr-2 h-4 w-4" />
              {isLoading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'}
            </Button>
          </CardContent>
        </Card>
      </div>

      <div className="bg-blue-50 p-4 rounded-lg">
        <div className="flex items-start gap-3">
          <div className="text-blue-600 mt-1">üí°</div>
          <div className="text-sm">
            <p className="font-medium text-blue-900 mb-1">–ì–¥–µ –Ω–∞–π—Ç–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?</p>
            <p className="text-blue-700">
              –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¢–µ–ª—Ñ–∏–Ω –∑–∞ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è API –¥–æ—Å—Ç—É–ø–∞. 
              –û–±—ã—á–Ω–æ —ç—Ç–æ —Ç–µ –∂–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
            </p>
            <Button 
              variant="link" 
              className="p-0 h-auto text-blue-600 mt-2"
              onClick={() => window.open('https://telfin.ru', '_blank')}
            >
              –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¢–µ–ª—Ñ–∏–Ω <ExternalLink className="ml-1 h-3 w-3" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};
