
import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Bot, Loader2 } from 'lucide-react';
import { useTelegramAuth } from '@/hooks/useTelegramAuth';
import { useTelegramSession } from '@/hooks/useTelegramSession';
import { useTelegramSessionTimeout } from '@/hooks/useTelegramSessionTimeout';
import { useTelegramConnectionAttempts } from '@/hooks/useTelegramConnectionAttempts';
import { TelegramConnectionStatus } from '@/components/telegram/TelegramConnectionStatus';
import { TelegramActiveConnections } from '@/components/telegram/TelegramActiveConnections';
import { TelegramPendingSession } from '@/components/telegram/TelegramPendingSession';
import { useToast } from '@/hooks/use-toast';

interface TelegramLink {
  id: string;
  chat_id: number;
  telegram_username?: string;
  first_name?: string;
  created_at: string;
  active: boolean;
}

interface PendingSession {
  session_code: string;
  telegram_url: string;
  expires_at: string;
}

export const TelegramManagement = () => {
  const [links, setLinks] = useState<TelegramLink[]>([]);
  const [loading, setLoading] = useState(true);
  const [pendingSession, setPendingSession] = useState<PendingSession | null>(null);
  
  const { getTelegramLinks, deactivateTelegramLink } = useTelegramAuth();
  const { startTelegramSession, checkSessionStatus, isGeneratingSession } = useTelegramSession();
  const { toast } = useToast();

  const {
    connectionAttempts,
    error,
    canAttemptConnection,
    handleSessionTimeout: onTimeout,
    handleSuccessfulConnection: onSuccess,
    incrementAttempts,
    resetError,
    setError
  } = useTelegramConnectionAttempts();

  const handleSessionTimeout = () => {
    setPendingSession(null);
    onTimeout();
  };

  const handleSuccessfulConnection = async () => {
    setPendingSession(null);
    onSuccess();
    await loadTelegramLinks();
    
    toast({
      title: "üéâ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!",
      description: "Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É",
    });
  };

  const { timeLeft, showTimeoutWarning, resetWarning } = useTelegramSessionTimeout({
    pendingSession,
    checkSessionStatus,
    onSessionTimeout: handleSessionTimeout,
    onSuccessfulConnection: handleSuccessfulConnection
  });

  useEffect(() => {
    loadTelegramLinks();
  }, []);

  const loadTelegramLinks = async () => {
    setLoading(true);
    resetError();
    try {
      const data = await getTelegramLinks();
      setLinks(data || []);
    } catch (error) {
      console.error('Error loading telegram links:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π');
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDeactivate = async (linkId: string) => {
    const success = await deactivateTelegramLink(linkId);
    if (success) {
      await loadTelegramLinks();
      toast({
        title: "‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ",
        description: "Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã",
      });
    }
  };

  const handleConnectBot = async () => {
    try {
      resetError();
      resetWarning();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
      if (!canAttemptConnection) {
        setError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (links.length > 0) {
        toast({
          title: "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ",
          description: "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –û—Ç–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.",
          variant: "destructive"
        });
        return;
      }

      const sessionData = await startTelegramSession();
      if (sessionData && sessionData.success) {
        setPendingSession({
          session_code: sessionData.session_code!,
          telegram_url: sessionData.telegram_url!,
          expires_at: sessionData.expires_at!
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram
        const opened = window.open(sessionData.telegram_url, '_blank');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
        if (!opened || opened.closed) {
          toast({
            title: "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å Telegram. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é.",
            variant: "destructive"
          });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          if (pendingSession) {
            toast({
              title: "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
              description: "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'START' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            });
          }
        }, 3000);
      }
    } catch (error: any) {
      console.error('Error connecting bot:', error);
      setError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞');
      incrementAttempts();
    }
  };

  const handleCancelPendingSession = () => {
    setPendingSession(null);
    resetWarning();
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Bot className="h-5 w-5" />
          Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </CardTitle>
        <CardDescription>
          –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–∞—Ö –∏ –æ—Ç—á—ë—Ç—ã –ø—Ä—è–º–æ –≤ Telegram
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <TelegramConnectionStatus
          isConnected={links.length > 0}
          isPending={!!pendingSession}
          error={error}
          showTimeoutWarning={showTimeoutWarning}
        />

        {loading ? (
          <div className="text-center py-4">
            <div className="animate-pulse text-gray-500 flex items-center justify-center gap-2">
              <Loader2 className="h-4 w-4 animate-spin" />
              –ó–∞–≥—Ä—É–∑–∫–∞...
            </div>
          </div>
        ) : (
          <>
            <TelegramActiveConnections
              links={links}
              onDeactivate={handleDeactivate}
              onRefresh={loadTelegramLinks}
              loading={loading}
            />

            {pendingSession && (
              <TelegramPendingSession
                pendingSession={pendingSession}
                timeLeft={timeLeft}
                showTimeoutWarning={showTimeoutWarning}
                onCancel={handleCancelPendingSession}
              />
            )}

            {links.length === 0 && !pendingSession && (
              <Button 
                onClick={handleConnectBot} 
                disabled={isGeneratingSession || !canAttemptConnection}
                className="w-full flex items-center gap-2"
              >
                {isGeneratingSession && <Loader2 className="h-4 w-4 animate-spin" />}
                {isGeneratingSession 
                  ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏...' 
                  : !canAttemptConnection
                    ? '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫'
                    : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç'
                }
              </Button>
            )}
          </>
        )}

        <div className="border-t pt-4 space-y-3">
          <h4 className="font-medium">–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</h4>
          <ul className="list-disc list-inside space-y-1 text-sm text-gray-600">
            <li>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö</li>
            <li>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</li>
            <li>–í–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</li>
            <li>–ê–ª–µ—Ä—Ç—ã –ø–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
};
