
import React, { useEffect, useState } from 'react';
import { Navigate } from 'react-router-dom';
import { useUser } from '@supabase/auth-helpers-react';
import { useOrganization } from '@/hooks/useOrganization';
import { useToast } from '@/hooks/use-toast';
import { Loader2 } from 'lucide-react';
import { useUserRole } from '@/hooks/useUserRole';
import { SuperadminOrgSelector } from './SuperadminOrgSelector';
import { useImpersonateOrg } from "@/hooks/useImpersonateOrg";
import { AppShell } from '@/components/AppShell';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
  const user = useUser();
  const { organization, isLoading: orgLoading } = useOrganization();
  const { toast } = useToast();
  const { isSuperAdmin, isLoading: roleLoading } = useUserRole();
  const { orgId } = useImpersonateOrg();
  const [hasCheckedOrg, setHasCheckedOrg] = useState(false);

  console.log('üõ°Ô∏è ProtectedRoute:', { 
    isSuperAdmin, 
    orgId, 
    hasOrganization: !!organization,
    isLoading: orgLoading || roleLoading 
  });

  if (!user) {
    console.log('üö´ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    return <Navigate to="/auth" replace />;
  }

  if (roleLoading || orgLoading) {
    console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="flex items-center gap-2">
          <Loader2 className="h-6 w-6 animate-spin" />
          <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
      </div>
    );
  }

  // –î–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞: –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
  if (isSuperAdmin && !organization) {
    console.log('üîß –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –±–µ–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä');
    return <SuperadminOrgSelector />;
  }

  useEffect(() => {
    if (user && !organization && !hasCheckedOrg && !isSuperAdmin) {
      console.log('‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
      toast({
        title: "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        description: "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.",
        variant: "destructive",
      });
      setHasCheckedOrg(true);
    }
  }, [user, organization, hasCheckedOrg, isSuperAdmin, toast]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (!organization && hasCheckedOrg && !isSuperAdmin) {
    console.log('üîÑ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ welcome');
    return <Navigate to="/welcome" replace />;
  }

  console.log('üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º AppShell –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AppShell –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π
  return <AppShell>{children}</AppShell>;
};

export default ProtectedRoute;
