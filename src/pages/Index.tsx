
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Dashboard2 } from "@/components/dashboard/Dashboard2";
import { useRealtimeUpdates } from "@/hooks/useRealtimeUpdates";
import { useAuth } from "@/hooks/useAuth";
import { useOrganization } from "@/hooks/useOrganization";
import { ArrowRight, LogOut, User, RefreshCw } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import { useToast } from "@/hooks/use-toast";

const Index = () => {
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  useRealtimeUpdates();
  const navigate = useNavigate();
  const { user, signOut } = useAuth();
  const { organization, isLoading: orgLoading } = useOrganization();
  const { toast } = useToast();
  
  const [setupStatus, setSetupStatus] = useState({
    telfin: false,
    telegram: false,
    users: false
  });

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const telfinConfigured = localStorage.getItem('telfin_hostname') && 
                            localStorage.getItem('telfin_username') && 
                            localStorage.getItem('telfin_password');
    
    const telegramConfigured = localStorage.getItem('telegram_bot_token') && 
                              localStorage.getItem('telegram_chat_id');
    
    const usersConfigured = localStorage.getItem('onboarding_users');

    const status = {
      telfin: !!telfinConfigured,
      telegram: !!telegramConfigured,
      users: !!usersConfigured
    };

    setSetupStatus(status);
  }, []);

  const allConfigured = setupStatus.telfin && setupStatus.telegram && setupStatus.users;

  const handleContinueSetup = () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º onboarding –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ welcome
    localStorage.removeItem('onboarding_completed');
    window.dispatchEvent(new Event('onboardingCompleted'));
    navigate('/welcome');
  };

  const handleSignOut = async () => {
    try {
      await signOut();
      toast({
        title: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        description: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.',
      });
    } catch (error) {
      console.error('Sign out error:', error);
      toast({
        variant: 'destructive',
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.',
      });
    }
  };

  const handleRefresh = () => {
    window.location.reload();
  };

  return (
    <div className="space-y-6">
      {/* –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <Card className="border-blue-200 bg-blue-50">
        <CardContent className="py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <User className="h-4 w-4" />
                <span className="text-sm">
                  {user?.email || '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
                </span>
              </div>
              <div className="text-sm text-gray-600">
                –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {orgLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : (organization?.name || '–ù–µ –Ω–∞–π–¥–µ–Ω–∞')}
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button 
                onClick={handleRefresh} 
                variant="outline"
                size="sm"
                className="gap-2"
              >
                <RefreshCw className="h-4 w-4" />
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
              <Button 
                onClick={handleSignOut} 
                variant="destructive"
                size="sm"
                className="gap-2"
              >
                <LogOut className="h-4 w-4" />
                –í—ã–π—Ç–∏
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ) */}
      {!allConfigured && (
        <Card className="border-amber-200 bg-amber-50">
          <CardContent className="py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span>üîß</span>
                <span className="text-sm text-amber-800">
                  –ù–µ –≤—Å—ë –ø–æ–¥–∫–ª—é—á–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
                </span>
              </div>
              <Button 
                onClick={handleContinueSetup} 
                variant="outline"
                size="sm"
                className="text-amber-700 border-amber-300 hover:bg-amber-100"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - Dashboard 2.0 */}
      <Dashboard2 />
    </div>
  );
};

export default Index;
