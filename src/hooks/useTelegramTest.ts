
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import { useTelegramNotifications } from '@/hooks/useTelegramNotifications';

export const useTelegramTest = () => {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  const { sendNotification } = useTelegramNotifications();

  const testConnection = async (botToken: string, chatId: string) => {
    if (!botToken || !chatId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞",
        variant: "destructive"
      });
      return false;
    }

    setIsLoading(true);
    
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await sendNotification({
        type: 'custom',
        data: {
          message: 'ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ CallControl\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.'
        }
      });

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram",
      });
      
      return true;
    } catch (error: any) {
      console.error('Telegram test error:', error);
      
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram",
        variant: "destructive"
      });
      
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  return {
    testConnection,
    isLoading
  };
};
